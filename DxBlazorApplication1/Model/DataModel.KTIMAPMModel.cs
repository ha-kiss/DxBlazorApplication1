//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/10/2022 12:24:24 μμ
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DxBlazorApplication1
{

    public partial class KTIMAPMModel : DbContext
    {

        public KTIMAPMModel() :
            base()
        {
            OnCreated();
        }

        public KTIMAPMModel(DbContextOptions<KTIMAPMModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=95.217.204.122,11433;Initial Catalog=KT5_20_TEST;Integrated Security=False;Persist Security Info=True;User ID=sa;Password=Elpho20!$");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<XAF_Role> XAF_Roles
        {
            get;
            set;
        }

        public virtual DbSet<XAF_User> XAF_Users
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.XAF_RoleMapping(modelBuilder);
            this.CustomizeXAF_RoleMapping(modelBuilder);

            this.XAF_UserMapping(modelBuilder);
            this.CustomizeXAF_UserMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region XAF_Role Mapping

        private void XAF_RoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<XAF_Role>().ToTable(@"XAF_Roles", @"dbo");
            modelBuilder.Entity<XAF_Role>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<XAF_Role>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<XAF_Role>().Property(x => x.IsAdministrative).HasColumnName(@"IsAdministrative").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<XAF_Role>().Property(x => x.CanEditModel).HasColumnName(@"CanEditModel").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<XAF_Role>().Property(x => x.IS_VISIBLE).HasColumnName(@"IS_VISIBLE").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"1");
            modelBuilder.Entity<XAF_Role>().HasKey(@"ID");
        }

        partial void CustomizeXAF_RoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region XAF_User Mapping

        private void XAF_UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<XAF_User>().ToTable(@"XAF_Users", @"dbo");
            modelBuilder.Entity<XAF_User>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<XAF_User>().Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<XAF_User>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"true");
            modelBuilder.Entity<XAF_User>().Property(x => x.ChangePasswordOnFirstLogon).HasColumnName(@"ChangePasswordOnFirstLogon").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<XAF_User>().Property(x => x.StoredPassword).HasColumnName(@"StoredPassword").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<XAF_User>().Property(x => x.PARTY_ID).HasColumnName(@"PARTY_ID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<XAF_User>().Property(x => x.ENERGOI_USER).HasColumnName(@"ENERGOI_USER").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<XAF_User>().Property(x => x.OBJECT_ID).HasColumnName(@"OBJECT_ID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<XAF_User>().Property(x => x.CURRENT_TASK_ID).HasColumnName(@"CURRENT_TASK_ID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<XAF_User>().Property(x => x.START_TIME).HasColumnName(@"START_TIME").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<XAF_User>().Property(x => x.CURRENT_APPOINTMENT_ID).HasColumnName(@"CURRENT_APPOINTMENT_ID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<XAF_User>().Property(x => x.PROJECT_ID).HasColumnName(@"PROJECT_ID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<XAF_User>().Property(x => x.APPOINTMENT_FACILITY_ID).HasColumnName(@"APPOINTMENT_FACILITY_ID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<XAF_User>().HasKey(@"ID");
        }

        partial void CustomizeXAF_UserMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<XAF_Role>().HasMany(x => x.XAF_Roles1).WithMany(op => op.XAF_Roles)
                .UsingEntity<Dictionary<string, object>>(
                    @"XAF_Roles_Roles",
                    x => x.HasOne<XAF_Role>().WithMany().HasPrincipalKey(@"ID").HasForeignKey(@"ChildRoles_ID"),
                    x => x.HasOne<XAF_Role>().WithMany().HasPrincipalKey(@"ID").HasForeignKey(@"ParentRoles_ID")
                )
                .ToTable(@"XAF_Roles_Roles", @"dbo");
            modelBuilder.Entity<XAF_Role>().HasMany(x => x.XAF_Users).WithMany(op => op.XAF_Roles)
                .UsingEntity<Dictionary<string, object>>(
                    @"XAF_Users_Roles",
                    x => x.HasOne<XAF_User>().WithMany().HasPrincipalKey(@"ID").HasForeignKey(@"Users_ID"),
                    x => x.HasOne<XAF_Role>().WithMany().HasPrincipalKey(@"ID").HasForeignKey(@"Roles_ID")
                )
                .ToTable(@"XAF_Users_Roles", @"dbo");
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
