@page "/grid"

@using DxBlazorApplication1.Data
@using DxBlazorApplication1.Model
@using Microsoft.EntityFrameworkCore
@using DevExpress.Blazor
@inject WeatherForecastService ForecastService

<h2>DevExpress Grid</h2>

<p class="pb-2 pt-2 mw-1100">
    The DevExpress Grid for Blazor allows you to display and manage data via a tabular (rows/columns) UI metaphor.
    This page uses our Blazor Grid component to display weather forecast values.
</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxGrid Data="@forecasts"
        CssClass="mw-1100">
        <Columns>
            <DxGridDataColumn Caption="Date" FieldName="Date" />
            <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF" />
        </Columns>
    </DxGrid>
    <br />
    <br />
    <DxGrid Data="@users"
            EditModelSaving="OnEditModelSaving"
            DataItemDeleting="OnDataItemDeleting"
            KeyFieldName="ID"
        CssClass="mw-1100">
        <Columns>
            <DxGridCommandColumn />
            <DxGridDataColumn Caption="ID" FieldName="ID" />
            <DxGridDataColumn Caption="UserName" FieldName="UserName" />
            <DxGridDataColumn Caption="Active" FieldName="IsActive">
                <CellDisplayTemplate>
                    <DxCheckBox CssClass="d-inline-block" Enabled="false" Checked="(bool)context.Value" />
                </CellDisplayTemplate>
            </DxGridDataColumn>
        </Columns>
        <EditFormTemplate Context="editFormContext">
            @{
                var user = (XAF_User)editFormContext.EditModel;
            }
            <DxFormLayout>
                <DxFormLayoutItem Caption="User Name:">
                    <DxTextBox @bind-Text="@user.UserName" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Active:">
                    <DxCheckBox @bind-Checked="@user.IsActive" />
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
}

@code {
    private WeatherForecast[]? forecasts;
    private List<XAF_User>? users;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        var dbContext = new KTIMAPMModel();
        users = await dbContext.XAF_Users.ToListAsync();
    }

    async Task OnEditModelSaving(GridEditModelSavingEventArgs e)
    {
        var dbContext = new KTIMAPMModel(LogLevel.Information);

        XAF_User editUser = (XAF_User)e.EditModel;

        // Re-query a data item from the database.
        XAF_User? user = e.IsNew ? new XAF_User() : await dbContext.XAF_Users.FindAsync(editUser.ID);

        // Assign changes from the edit model to the data item.
        if (user != null)
        {
            user.UserName = editUser.UserName;
            user.IsActive = editUser.IsActive;
            // Post changes to the database.
            if (e.IsNew)
                await dbContext.AddAsync(user);
            await dbContext.SaveChangesAsync();
            // Reload the entire Grid.
            users = await dbContext.XAF_Users.ToListAsync();
        }
    }

    async Task OnDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var dbContext = new KTIMAPMModel(LogLevel.Information);

        // Re-query a data item from the database.
        var dataItem = dbContext.XAF_Users.Find(((XAF_User)e.DataItem).ID);
        if (dataItem != null)
        {
            // Remove the data item from the database.
            dbContext.Remove(dataItem);
            await dbContext.SaveChangesAsync();
            // Reload the entire Grid.
            users = await dbContext.XAF_Users.ToListAsync();
        }
    }
}