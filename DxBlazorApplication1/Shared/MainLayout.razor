@using switcher.Shared
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;

<DxLayoutBreakpoint MaxWidth="1200"
                    @bind-IsActive="@IsMobileLayout" />

<div class="page">

    <HeadContent>
        @foreach (var item in ActiveTheme.StylesheetLinkUrl)
        {
            <link href="@item" rel="stylesheet" />
        }
        @{
            if (ActiveTheme.StylesheetLinkUrl.Contains("slate"))
            {
                <style>
                    .dxbs-gridview {
                        --selection-bg: rgba(255, 255, 255, 0.075) !important;
                    }
                </style>
            }
        }
    </HeadContent>

    <DxGridLayout CssClass="page-layout">
        <Rows>
            @if(IsMobileLayout) {
                <DxGridLayoutRow Areas="header" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="sidebar" Height="auto"></DxGridLayoutRow>
                <DxGridLayoutRow Areas="content" />
            }
            else {
                <DxGridLayoutRow Areas="header header" Height="auto" />
                <DxGridLayoutRow Areas="@(IsSidebarExpanded ? "sidebar content" : "content content")" />
            }
        </Rows>
        <Columns>
            @if(!IsMobileLayout) {
                <DxGridLayoutColumn Width="auto" />
                <DxGridLayoutColumn />
            }
        </Columns>
        <Items>
            <DxGridLayoutItem Area="header" CssClass="layout-item">
                <Template>
                    <Header @bind-ToggleOn="@IsSidebarExpanded" @bind-SelectedTheme="@ActiveTheme" />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="sidebar" CssClass="layout-item">
                <Template>
                    <NavMenu StateCssClass="@NavMenuCssClass" />
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Area="content" CssClass="content px-4 layout-item" @key=@ActiveTheme>
                <Template>
                    @Body
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
    </div>

@code{
    string? NavMenuCssClass { get; set; }
    bool _isMobileLayout;
    bool IsMobileLayout {
        get => _isMobileLayout;
        set {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded {
        get => _isSidebarExpanded;
        set {
            if(_isSidebarExpanded != value) {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    protected override void OnInitialized()
    {

        NavigationManager.LocationChanged += OnLocationChanged;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var themeName = await Helpers.GetCookieAsync(JsRuntime, "ThemeName");

        if (string.IsNullOrEmpty(themeName) || themeName == "null")
            themeName = "default";

        if (themeName != ActiveTheme.Name)
        {
            ActiveTheme = ThemeItem.Create(themeName);

            foreach (string stylesheetLinkUrl in ActiveTheme.StylesheetLinkUrl)
                await JsRuntime.InvokeVoidAsync("fetch", stylesheetLinkUrl, new
                {
                    method = "GET",
                    mode = "no-cors"
                });

            if (firstRender)
                StateHasChanged();          // force a re-Render
        }
    }

    async void OnLocationChanged(object? sender, LocationChangedEventArgs args) {
        if(IsMobileLayout) {
            IsSidebarExpanded = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose() {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    bool _themeSwitcherShown = false;
    ThemeItem _activeTheme = ThemeItem.Default;

    ThemeItem ActiveTheme
    {
        get { return _activeTheme; }
        set 
        { 
            _activeTheme = value;
            Helpers.SetCookie(JsRuntime, "ThemeName", _activeTheme.Name, 100);
        }
    }

}